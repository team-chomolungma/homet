import React, {useEffect, useState} from 'react';
import {
    Box,
    Button,
    IconButton,
    TextField,
    Typography,
    InputAdornment
} from '@mui/material';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import VisibilityIcon from '@mui/icons-material/Visibility';
import VisibilityOffIcon from '@mui/icons-material/VisibilityOff';
import {useNavigate} from 'react-router-dom';
import axiosInstance from '../../lib/axios.js';
import FormControlLabel from '@mui/material/FormControlLabel';
import Checkbox from '@mui/material/Checkbox';

function Signup() {
    const navigate = useNavigate();

    const [userId, setUserId] = useState('');
    const [password, setPassword] = useState('');
    const [userName, setUserName] = useState('');
    const [userIdError, setUserIdError] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [passwordError, setPasswordError] = useState('');
    const [userNameError, setUserNameError] = useState('');
    const [playerId, setplayerId] = useState(null)
    const [security, setSecurity] = useState(false);

    // „É¶„Éº„Ç∂„ÉºID„ÅÆÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÔºàÂÖ•ÂäõÊ¨Ñ„Åã„Çâ„Éï„Ç©„Éº„Ç´„Çπ„ÅåÂ§ñ„Çå„Åü„Çø„Ç§„Éü„É≥„Ç∞„Åó„Å¶„Åæ„ÅôÔºâ
    const checkUserIdDuplicate = async () => {
        if (!userId.trim()) return;
        try {
            const res = await axiosInstance.get(`/api/users/search?userID=${userId}`);
            const data = res.data;

            if (data.result && data.result.length > 0) {
                setUserIdError('„Åì„ÅÆ„É¶„Éº„Ç∂„ÉºID„ÅØ„Åô„Åß„Å´‰Ωø„Çè„Çå„Å¶„ÅÑ„Åæ„Åô');
            } else {
                setUserIdError('');
            }
        } catch (err) {
            console.error('ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÂ§±Êïó', err);
        }
    };


    const handleSubmit = async (e) => {
        e.preventDefault();
        console.log('üîµ „Ç¢„Ç´„Ç¶„É≥„Éà‰ΩúÊàê„Éú„Çø„É≥Êäº‰∏ã');

        let hasError = false;

        if (!playerId) {
            alert('OneSignal„ÅÆÂàùÊúüÂåñ‰∏≠„Åß„Åô„ÄÇÂ∞ë„ÅóÂæÖ„Å£„Å¶„Åã„Çâ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ');
            console.warn('‚õî playerId „Åå null„ÄÇOneSignalÊú™ÂàùÊúüÂåñ');
            return;
        }
        console.log('2');

        if (!userId.trim()) {
            setUserIdError('„É¶„Éº„Ç∂„ÉºID„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            hasError = true;
        } else {
            setUserIdError('');
        }
        console.log('3');

        if (!password.trim()) {
            setPasswordError('„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            hasError = true;
        } else if (!/^[a-zA-Z0-9]{6}$/.test(password)) {
            setPasswordError('6ÊñáÂ≠ó„ÅÆËã±Êï∞Â≠ó„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            hasError = true;
        } else {
            setPasswordError('');
        }

        console.log('4');
        if (!userName.trim()) {
            setUserNameError('„É¶„Éº„Ç∂„ÉºÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            hasError = true;
        } else if (!/^[^\x01-\x7E]+$/.test(userName)) {
            setUserNameError('ÂÖ®ËßíÊñáÂ≠ó„ÅÆ„Åø„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            hasError = true;
        } else if (Array.from(userName).length >= 6) {
            setUserNameError('ÂÖ®Ëßí6ÊñáÂ≠ó‰ª•‰∏ã„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            hasError = true;
        } else {
            setUserNameError('');
        }
        console.log('5');

        if (!security) {
            console.warn('‚õî ÂêåÊÑè„ÉÅ„Çß„ÉÉ„ÇØ„Åå„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
            return;
        }
        console.log('6');

        if (hasError) {
            console.warn('‚õî „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„ÅÇ„Çä');
            return;
        }
        console.log('7');

        try {
            console.log('‚úÖ „Çµ„Ç§„É≥„Ç¢„ÉÉ„Éó„É™„ÇØ„Ç®„Çπ„ÉàÈÄÅ‰ø°‰∏≠...');
            const res = await axiosInstance.post('/api/auth/signup', {
                userID: userId,
                displayname: userName,
                password: password,
                playerID: playerId
            });

            console.log('üü¢ „Çµ„Éº„Éê„Éº„Åã„Çâ„ÅÆ„É¨„Çπ„Éù„É≥„Çπ:', res);

            if (res.status === 200) {
                console.log('üü¢ÊàêÂäü');
                navigate('/home');
            } else {
                alert(`‰∫àÊúü„Åõ„Å¨„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„ÅüÔºàstatus: ${res.status}Ôºâ`);
            }
        } catch (err) {
            console.error('‚ùå „Çµ„Ç§„É≥„Ç¢„ÉÉ„ÉóÈÄö‰ø°Â§±Êïó:', err);

            const status = err.response?.status;
            if (status === 409) {
                alert('„Åì„ÅÆ„É¶„Éº„Ç∂„ÉºID„ÅØ„Åô„Åß„Å´‰Ωø„Çè„Çå„Å¶„ÅÑ„Åæ„Åô');
            } else if (status) {
                alert(`„Çµ„Éº„Éê„Éº„Ç®„É©„ÉºÔºà${status}Ôºâ„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü`);
            } else {
                alert('„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Åæ„Åü„ÅØ‰∫àÊúü„Åõ„Å¨„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
            }
        }
    };


    useEffect(() => {
        const getPlayerId = async () => {
            try {
                const playerId = window.OneSignal?.User?._currentUser?.onesignalId;
                // const playerId = await OneSignal.getUserId();
                console.log('‚úÖ OneSignal ID:', playerId);
                setplayerId(playerId);
            } catch (e) {
                console.error('‚ùå OneSignal IDÂèñÂæóÂ§±Êïó:', e);
            }
        };
        getPlayerId();
    }, []);

    return (
        <Box
            sx={{
                minHeight: '100vh',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                px: 2,
            }}
        >
            <IconButton
                onClick={() => navigate(-1)}
                sx={{position: 'absolute', top: 24, left: 24}}
            >
                <ArrowBackIcon/>
            </IconButton>
            <Box
                sx={{
                    width: '100%',
                    maxWidth: 400,
                    position: 'relative',
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center',
                }}
            >
                <Box
                    component="form"
                    onSubmit={handleSubmit}
                    sx={{
                        display: 'flex',
                        flexDirection: 'column',
                        gap: 2,
                        alignItems: 'center',
                        width: '100%',
                    }}
                >
                    <Typography sx={{fontSize: 40, lineHeight: '53px', color: '#333333'}}>
                        Homet
                    </Typography>

                    <Box sx={{width: 300}}>
                        <Typography sx={{fontSize: 16, mb: 0.5}}>„É¶„Éº„Ç∂„ÉºID</Typography>
                        <TextField
                            fullWidth
                            value={userId}
                            onChange={(e) => setUserId(e.target.value)}
                            onBlur={checkUserIdDuplicate}
                            error={!!userIdError}
                            variant="outlined"
                            sx={{
                                backgroundColor: '#fff',
                                borderRadius: 1,
                                '& .MuiOutlinedInput-root': {
                                    fontSize: 18,
                                    height: 48,
                                },
                            }}
                            placeholder="Ëã±Êï∞Â≠ó„ÅßÂÖ•Âäõ"
                        />
                        <Typography
                            sx={{
                                fontSize: 12,
                                mt: '2px',
                                minHeight: '1.5em',
                                color: userIdError ? '#e53935' : 'transparent',
                                backgroundColor: '#fff1f3',
                                pl: 1,
                                borderRadius: 1,
                            }}
                        >
                            {userIdError || '„ÄÄ'}
                        </Typography>
                    </Box>

                    <Box sx={{width: 300}}>
                        <Typography sx={{fontSize: 16, color: '#333', mt: 3}}>
                            „Éë„Çπ„ÉØ„Éº„Éâ
                        </Typography>
                        <TextField
                            type={showPassword ? 'text' : 'password'}
                            fullWidth
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            error={!!passwordError}
                            variant="outlined"
                            InputProps={{
                                endAdornment: (
                                    <InputAdornment position="end">
                                        <IconButton
                                            onClick={() => setShowPassword((prev) => !prev)}
                                            edge="end"
                                        >
                                            {showPassword ? <VisibilityIcon/> : <VisibilityOffIcon/>}
                                        </IconButton>
                                    </InputAdornment>
                                ),
                                sx: {
                                    fontSize: 18,
                                    height: 48,
                                    backgroundColor: '#fff',
                                    borderRadius: 1,
                                },
                            }}
                            placeholder="6ÊñáÂ≠ó„ÅÆËã±Êï∞Â≠ó„ÅßÂÖ•Âäõ"
                        />
                        <Typography
                            sx={{
                                fontSize: 12,
                                mt: '2px',
                                minHeight: '1.5em',
                                color: passwordError ? '#e53935' : 'transparent',
                                backgroundColor: '#fff1f3',
                                pl: 1,
                                borderRadius: 1,
                            }}
                        >
                            {passwordError || '„ÄÄ'}
                        </Typography>
                    </Box>

                    <Box sx={{width: 300}}>
                        <Typography sx={{fontSize: 16, color: '#333', mt: 4}}>
                            „É¶„Éº„Ç∂„ÉºÂêç
                        </Typography>
                        <TextField
                            fullWidth
                            value={userName}
                            onChange={(e) => setUserName(e.target.value)}
                            error={!!userNameError}
                            variant="outlined"
                            sx={{
                                backgroundColor: '#fff',
                                borderRadius: 1,
                                '& .MuiOutlinedInput-root': {
                                    fontSize: 18,
                                    height: 48,
                                },
                            }}
                            placeholder="ÂÖ®Ëßí6ÊñáÂ≠ó‰ª•‰∏ã„ÅßÂÖ•Âäõ"
                        />
                        <Typography
                            sx={{
                                fontSize: 12,
                                mt: '2px',
                                minHeight: '1.5em',
                                color: userNameError ? '#e53935' : 'transparent',
                                backgroundColor: '#fff1f3',
                                pl: 1,
                                borderRadius: 1,
                            }}

                        >
                            {userNameError || '„ÄÄ'}
                        </Typography>
                    </Box>
                    <FormControlLabel
                        control={
                            <Checkbox
                                checked={security}
                                onChange={(e) => setSecurity(e.target.checked)}
                            />
                        }
                        label="ÂÄã‰∫∫ÊÉÖÂ†±„ÅÆÂèñ„ÇäÊâ±„ÅÑ„Å´ÂêåÊÑè„Åó„Åæ„Åô"
                    />
                    <Button
                        disabled={!security}
                        type="submit"
                        variant="contained"
                        sx={{
                            // mt: 2,
                            width: 228,
                            height: 76,
                            borderRadius: '20px',
                            fontSize: 24,
                            backgroundColor: '#DA63A5',
                            justifyContent: 'center',
                        }}
                    >
                        „Ç¢„Ç´„Ç¶„É≥„Éà‰ΩúÊàê
                    </Button>

                </Box>

            </Box>
        </Box>
    );
}

export default Signup;